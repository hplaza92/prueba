{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Ejemplo Clasificación de Imágenes con Redes Neuronales","provenance":[{"file_id":"https://github.com/pytorch/tutorials/blob/gh-pages/_downloads/cifar10_tutorial.ipynb","timestamp":1556231413142}],"collapsed_sections":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.6"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"}},"cells":[{"cell_type":"code","metadata":{"id":"czUINsGrnjw4","colab_type":"code","colab":{}},"source":["%matplotlib inline"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XDBXFExTnjw-","colab_type":"text"},"source":["\n","# Entrenar una Red para Clasificar Objetos a partir de imágenes:\n","\n","\n","Generalmente, cuando hay que lidiar con datos de imagen, texto, audio o video,\n","se suelen usar paquetes de Python que cargan datos en una matriz Numpy.\n","\n","Para este ejemplo, transformaremos esta matriz de Numpy en una de Torch usando: ``. * Tensor``.\n","\n","- Para imágenes, paquetes como Pillow, OpenCV son útiles.\n","- Para audio, paquetes como scipy y librosa.\n","- Para texto, paquetes de la libreria estandar de Python o Cython, o NLTK y\n","   SpaCy son útiles\n","\n","En este caso, para la carga de imágenes, vamos a usar el paquete llamado\n","`` torchvision``, que simplifica la carga de datasets libres como Imagenet, CIFAR10, MNIST, etc. y transformadores de datos para imágenes, a saber,\n","`` torchvision.datasets`` y `` torch.utils.data.DataLoader``.\n","\n","Esto proporciona una gran comodidad y evita escribir código.\n","\n","Para este tutorial, usaremos el conjunto de datos CIFAR10. Tiene las clases: \"avión\", \"automóvil\", \"pájaro\", \"gato\", \"venado\", \"Perro\", \"rana\", \"caballo\", \"barco\", \"camión\". Las imágenes en CIFAR-10 son de tamaño 3x32x32, es decir, imágenes en color de 3 canales de 32x32 píxeles de tamaño, por ejemplo:\n","\n","![texto alternativo](https://i.imgur.com/ihdlkR0.png/)\n","\n","\n","Una vez tenemos los datos, entrenaremos una red neuronal. Haremos los siguientes pasos en orden:\n","\n","1. Carguar y normalizar los conjuntos de datos de prueba y entrenamiento CIFAR10 usando\n","    `` torchvision``\n","2. Definir una red neuronal de convolución\n","3. Definir una función de pérdida\n","4. Capacitar a la red en los datos de entrenamiento\n","5. Probar la red en los datos de prueba\n","\n","## Cargando y normalizando CIFAR10.\n","Usando `` torchvision``, es extremadamente fácil cargar CIFAR10.\n","\n"]},{"cell_type":"code","metadata":{"id":"UPoWOSJxnjw-","colab_type":"code","colab":{}},"source":["import torch\n","import torchvision\n","import torchvision.transforms as transforms"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BLAq8wsmnjxC","colab_type":"text"},"source":["La salida de los datasets de torchvision son imágenes de PILImage de rango [0, 1].\n","\n","\n","\n","\n","Los transformamos a Tensores de rango normalizado [-1, 1].\n","\n"]},{"cell_type":"code","metadata":{"id":"7r4gs_IhnjxD","colab_type":"code","outputId":"44464947-f4ae-4d80-ffb2-fef1a3cf26bf","executionInfo":{"status":"ok","timestamp":1572872825004,"user_tz":-60,"elapsed":16899,"user":{"displayName":"Rafael Castillo Alcibar","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCHtDFDzMSCFZb67V38eU52CChi_uzVotz6_6FxFA=s64","userId":"06503053353692719082"}},"colab":{"base_uri":"https://localhost:8080/","height":90}},"source":["transform = transforms.Compose(\n","    [transforms.ToTensor(),\n","     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n","\n","trainset = torchvision.datasets.CIFAR10(root='./data', train=True,\n","                                        download=True, transform=transform)\n","trainloader = torch.utils.data.DataLoader(trainset, batch_size=4,\n","                                          shuffle=True, num_workers=2)\n","\n","testset = torchvision.datasets.CIFAR10(root='./data', train=False,\n","                                       download=True, transform=transform)\n","testloader = torch.utils.data.DataLoader(testset, batch_size=4,\n","                                         shuffle=False, num_workers=2)\n","\n","classes = ('plane', 'car', 'bird', 'cat',\n","           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')"],"execution_count":3,"outputs":[{"output_type":"stream","text":["\r0it [00:00, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./data/cifar-10-python.tar.gz\n"],"name":"stdout"},{"output_type":"stream","text":["170500096it [00:06, 26198851.99it/s]                               \n"],"name":"stderr"},{"output_type":"stream","text":["Extracting ./data/cifar-10-python.tar.gz to ./data\n","Files already downloaded and verified\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"3k8v-cUTnjxG","colab_type":"text"},"source":["Vamos a ver el aspecto que tiene una imagen:\n","\n"]},{"cell_type":"code","metadata":{"id":"aUw0qAT6njxG","colab_type":"code","outputId":"22034f3e-238c-4a2a-e00a-29dad77bbaee","executionInfo":{"status":"ok","timestamp":1572872825453,"user_tz":-60,"elapsed":17330,"user":{"displayName":"Rafael Castillo Alcibar","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCHtDFDzMSCFZb67V38eU52CChi_uzVotz6_6FxFA=s64","userId":"06503053353692719082"}},"colab":{"base_uri":"https://localhost:8080/","height":156}},"source":["import matplotlib.pyplot as plt\n","import numpy as np\n","\n","# functions to show an image\n","def imshow(img):\n","    img = img / 2 + 0.5     # unnormalize\n","    npimg = img.numpy()\n","    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n","\n","\n","# get some random training images\n","dataiter = iter(trainloader)\n","images, labels = dataiter.next()\n","\n","# show images\n","imshow(torchvision.utils.make_grid(images))\n","# print labels\n","print(' '.join('%5s' % classes[labels[j]] for j in range(4)))"],"execution_count":4,"outputs":[{"output_type":"stream","text":[" deer  frog  bird  deer\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"iBjyt9yknjxJ","colab_type":"text"},"source":["## Definir una red convolucional:\n","Vamos a definir una arquitectura de red con 2 [capas convolucionales](https://adeshpande3.github.io/A-Beginner%27s-Guide-To-Understanding-Convolutional-Neural-Networks/) con MaxPooling y 2 capas [fully connected](https://playground.tensorflow.org/#activation=tanh&batchSize=10&dataset=circle&regDataset=reg-plane&learningRate=0.03&regularizationRate=0&noise=0&networkShape=4,2&seed=0.33725&showTestData=false&discretize=false&percTrainData=50&x=true&y=true&xTimesY=false&xSquared=false&ySquared=false&cosX=false&sinX=false&cosY=false&sinY=false&collectStats=false&problem=classification&initZero=false&hideText=false):\n","\n"]},{"cell_type":"code","metadata":{"id":"1CMKKunHnjxK","colab_type":"code","colab":{}},"source":["import torch.nn as nn\n","import torch.nn.functional as F\n","\n","\n","class Net(nn.Module):\n","    def __init__(self):\n","        super(Net, self).__init__()\n","        self.conv1 = nn.Conv2d(3, 6, 5)\n","        self.pool = nn.MaxPool2d(2, 2)\n","        self.conv2 = nn.Conv2d(6, 16, 5)\n","        self.fc1 = nn.Linear(16 * 5 * 5, 120)\n","        self.fc2 = nn.Linear(120, 84)\n","        self.fc3 = nn.Linear(84, 10)\n","\n","    def forward(self, x):\n","        x = self.pool(F.relu(self.conv1(x)))\n","        x = self.pool(F.relu(self.conv2(x)))\n","        x = x.view(-1, 16 * 5 * 5)\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = self.fc3(x)\n","        return x\n","\n","\n","net = Net()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"To_ss51lnjxM","colab_type":"text"},"source":["## Definir la función de pérdida y el optimizador\n","Como función de pérdida Classification Cross-Entropy loss y como optimizador: SGD con momentum.\n","\n"]},{"cell_type":"code","metadata":{"id":"QOvuw4TInjxN","colab_type":"code","colab":{}},"source":["import torch.optim as optim\n","\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"d91uCf-MnjxP","colab_type":"text"},"source":["## Entrenar la red\n","\n","Pasemos a entrenar la red:\n","\n"]},{"cell_type":"code","metadata":{"id":"03W_MAyinjxQ","colab_type":"code","outputId":"88238ab6-4662-4f67-aeb5-5a88dcb898cd","executionInfo":{"status":"ok","timestamp":1572873038032,"user_tz":-60,"elapsed":229865,"user":{"displayName":"Rafael Castillo Alcibar","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCHtDFDzMSCFZb67V38eU52CChi_uzVotz6_6FxFA=s64","userId":"06503053353692719082"}},"colab":{"base_uri":"https://localhost:8080/","height":254}},"source":["for epoch in range(2):  # loop over the dataset multiple times\n","\n","    running_loss = 0.0\n","    for i, data in enumerate(trainloader, 0):\n","        # get the inputs\n","        inputs, labels = data\n","\n","        # zero the parameter gradients\n","        optimizer.zero_grad()\n","\n","        # forward + backward + optimize\n","        outputs = net(inputs)\n","        loss = criterion(outputs, labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        # print statistics\n","        running_loss += loss.item()\n","        if i % 2000 == 1999:    # print every 2000 mini-batches\n","            print('[%d, %5d] loss: %.3f' %\n","                  (epoch + 1, i + 1, running_loss / 2000))\n","            running_loss = 0.0\n","\n","print('Finished Training')"],"execution_count":7,"outputs":[{"output_type":"stream","text":["[1,  2000] loss: 2.210\n","[1,  4000] loss: 1.846\n","[1,  6000] loss: 1.673\n","[1,  8000] loss: 1.589\n","[1, 10000] loss: 1.508\n","[1, 12000] loss: 1.458\n","[2,  2000] loss: 1.391\n","[2,  4000] loss: 1.379\n","[2,  6000] loss: 1.354\n","[2,  8000] loss: 1.323\n","[2, 10000] loss: 1.295\n","[2, 12000] loss: 1.292\n","Finished Training\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"duKzYnP8njxV","colab_type":"text"},"source":["## Validar la red\n","Hemos entrenado la red con dos pasadas sobre el dataset de entrenamiento, pero ahora necesitamos comprobar como funciona nuestra red sobre unos datos nuevos.\n","\n","Vamos a chequear las predicciones de nuestra red contra las imágenes correctamente clasificadas. \n","\n","Dicho lo cual, vamos imprimir unas cuantas imágenes:\n","\n"]},{"cell_type":"code","metadata":{"id":"9VzNSCSRnjxX","colab_type":"code","outputId":"6afc82a7-8181-4ae1-c553-082e1d663934","executionInfo":{"status":"ok","timestamp":1572873395825,"user_tz":-60,"elapsed":786,"user":{"displayName":"Rafael Castillo Alcibar","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCHtDFDzMSCFZb67V38eU52CChi_uzVotz6_6FxFA=s64","userId":"06503053353692719082"}},"colab":{"base_uri":"https://localhost:8080/","height":156}},"source":["dataiter = iter(testloader)\n","images, labels = dataiter.next()\n","images, labels = dataiter.next()\n","\n","# print images\n","imshow(torchvision.utils.make_grid(images))\n","print('GroundTruth: ', ' '.join('%5s' % classes[labels[j]] for j in range(4)))"],"execution_count":15,"outputs":[{"output_type":"stream","text":["GroundTruth:   frog  frog   car  frog\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"FArKlhYHnjxc","colab_type":"text"},"source":["Bien, vamos a ver como etiqueta esas imagenes nuestra red:\n","\n"]},{"cell_type":"code","metadata":{"id":"rb4LnBUCnjxc","colab_type":"code","colab":{}},"source":["outputs = net(images)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dmh4UIVwnjxf","colab_type":"text"},"source":["Las salidas son scores para las 10 clases. Cuanto más alta es el score para una clase, más piensa la red que la imagen es de la clase particular. Entonces, vamos a obtener el índice que maximiza el score:\n","\n"]},{"cell_type":"code","metadata":{"id":"akGchbKMnjxf","colab_type":"code","outputId":"f3c3f66a-e62e-48e8-fe8b-6259f114bc0a","executionInfo":{"status":"ok","timestamp":1572873415639,"user_tz":-60,"elapsed":738,"user":{"displayName":"Rafael Castillo Alcibar","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCHtDFDzMSCFZb67V38eU52CChi_uzVotz6_6FxFA=s64","userId":"06503053353692719082"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["_, predicted = torch.max(outputs, 1)\n","\n","print('Predicted: ', ' '.join('%5s' % classes[predicted[j]]\n","                              for j in range(4)))"],"execution_count":17,"outputs":[{"output_type":"stream","text":["Predicted:   frog  frog truck  frog\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"W3S819EInjxj","colab_type":"text"},"source":["Los resultados parecen bastante buenos.\n","\n","Vamos a ver que tal lo hace para todo el dataset:\n"]},{"cell_type":"code","metadata":{"id":"NJ7jK9esnjxj","colab_type":"code","outputId":"69a156ee-9fb6-48d2-d238-7910ce242c35","executionInfo":{"status":"ok","timestamp":1572873049427,"user_tz":-60,"elapsed":241200,"user":{"displayName":"Rafael Castillo Alcibar","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCHtDFDzMSCFZb67V38eU52CChi_uzVotz6_6FxFA=s64","userId":"06503053353692719082"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["correct = 0\n","total = 0\n","with torch.no_grad():\n","    for data in testloader:\n","        images, labels = data\n","        outputs = net(images)\n","        _, predicted = torch.max(outputs.data, 1)\n","        total += labels.size(0)\n","        correct += (predicted == labels).sum().item()\n","\n","print('Accuracy of the network on the 10000 test images: %d %%' % (\n","    100 * correct / total))"],"execution_count":11,"outputs":[{"output_type":"stream","text":["Accuracy of the network on the 10000 test images: 53 %\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"rNHy4YTXnjxl","colab_type":"text"},"source":["Puesto que la probabilidad media para acertar en el azar es de un 10%, nuestra red parece que lo hace bastante bien porque acierta un 53% de las veces!\n","\n","En particular, ¿como lo hace para cada una de las clases?\n","\n"]},{"cell_type":"code","metadata":{"id":"ot6fFe3ynjxm","colab_type":"code","outputId":"fe880fb6-aaec-42f5-dfa7-3aac1386317c","executionInfo":{"status":"ok","timestamp":1572873058610,"user_tz":-60,"elapsed":250373,"user":{"displayName":"Rafael Castillo Alcibar","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCHtDFDzMSCFZb67V38eU52CChi_uzVotz6_6FxFA=s64","userId":"06503053353692719082"}},"colab":{"base_uri":"https://localhost:8080/","height":199}},"source":["class_correct = list(0. for i in range(10))\n","class_total = list(0. for i in range(10))\n","with torch.no_grad():\n","    for data in testloader:\n","        images, labels = data\n","        outputs = net(images)\n","        _, predicted = torch.max(outputs, 1)\n","        c = (predicted == labels).squeeze()\n","        for i in range(4):\n","            label = labels[i]\n","            class_correct[label] += c[i].item()\n","            class_total[label] += 1\n","\n","\n","for i in range(10):\n","    print('Accuracy of %5s : %2d %%' % (\n","        classes[i], 100 * class_correct[i] / class_total[i]))"],"execution_count":12,"outputs":[{"output_type":"stream","text":["Accuracy of plane : 60 %\n","Accuracy of   car : 34 %\n","Accuracy of  bird : 37 %\n","Accuracy of   cat : 31 %\n","Accuracy of  deer : 50 %\n","Accuracy of   dog : 61 %\n","Accuracy of  frog : 51 %\n","Accuracy of horse : 60 %\n","Accuracy of  ship : 64 %\n","Accuracy of truck : 80 %\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"TucmsRKj0tGO","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}